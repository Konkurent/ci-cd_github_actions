name: Java CI with Maven

# триггер на push и pr, тк ракатываемся на мой личный серер, то ограничим деплой только на master и release
on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
      - release/*

jobs:
  build:
#    Job сборки дистрибутива
    name: build
    runs-on: ubuntu-latest
    steps:
    # Копируем в рабочую область последний коммит
    - uses: actions/checkout@v4
    # устанавливаем JDK 17, проект простейший нам неважно кто дистрибьбтер, возьмем temurin. Сборшик Maven
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven without test
      # собираю jar без тестов
      run: mvn -B install --file pom.xml -Dmaven.test.skip=true
#      кэшируем зависимости maven
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('*/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    # прихраниваем артифакт на стадию деплоя.
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: art
        path: target/example-0.0.1-SNAPSHOT.jar

# тестируем приложение (job для запуска тестов)
  test_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # устанавливаем JDK 17, проект простейший нам неважно кто дистрибьбтер, возьмем temurin. Сборшик Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

# на этом шаге идет комплиривоние проекта + запуск тестов
      - name: Test
        run: mvn -B test --file pom.xml
# показываем результаты тестов
      - name: Show results
        run: cat target/surefire-reports/*.txt | grep "Tests run"
# проверяем работоспособность на windows
  test_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # устанавливаем JDK 17, проект простейший нам неважно кто дистрибьбтер, возьмем temurin. Сборшик Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test
        run: mvn -B test --file pom.xml

      - name: Show results
        run: cat target/surefire-reports/*.txt | grep "Tests run"
# проверяем работоспособность на mac os
  test_macos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # устанавливаем JDK 17, проект простейший нам неважно кто дистрибьбтер, возьмем temurin. Сборшик Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test
        run: mvn -B test --file pom.xml

      - name: Show results
        run: cat target/surefire-reports/*.txt | grep "Tests run"

# job deploy. Деплоить надо только рабочие сборки, поэтому у нас прямая зависимость от job test
  deploy:
    runs-on: ubuntu-latest
    needs:
      - test_macos
      - test_ubuntu
      - test_windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

# достаем результат build
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: art

# логинимся в docker
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# собираем image и кладем его в docker hub.
# по хорошемку в поле registry должна стоять ссылка на наш nexus repository, но у нас корпоративной тайны нет
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: 'true'
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd_github_actions:latest
# создаем ssh ключ в директории нашего раннера для подключения к удаленному серверу
      - name: Create ssh file
        run: |
                    mkdir -p ~/.ssh
                    echo "${{ secrets.SSH }}" > ~/.ssh/id_rsa
                    chmod 600 ~/.ssh/id_rsa
                    ssh-keyscan -H ${{ secrets.SERVER_ID }} >> ~/.ssh/known_hosts

# подключаемся к серверу, переходим в папку с docker compose, останавливаем существующий контейнер, стягиваем изменения и поднимаем контейнер снова
      - name: Connect to server
        run: ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_ID }} "
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} docker.io;
            cd projects/mifi;
            docker-compose stop;
            docker-compose pull mifi;
            docker-compose up -d
          "